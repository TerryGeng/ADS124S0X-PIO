.pio_version 0

; Clock phase = 1: data transitions on the leading edge of each SCK pulse, and
; is captured on the trailing edge.

.program spi_cpha1_read_on_demand
.side_set 1

; Total 4 bit of input: NOP_BIT + SKIP_DELAY_BIT + SKIP_READ_BIT + WRITE_DATA_BIT
; Shift direction: <left>
;
; input pins: [0] MISO, [1] trigger (active low)
; output pins: [0] MOSI
; side-set pins: [0] SCK
;
; 12 instructions per SCK cycle

armed:
    out x, 1         side 0     ; discard next WRITE_DATA_BIT bit
public wait_inst:
    wait 0 gpio 6    side 0     ; wait for the trigger to be asserted LOW
public entry_point:
.wrap_target
next_inst:
    out x, 1         side 0     ; Take NOP_BIT, stall here on empty (keep SCK deasserted)
    jmp !x not_nop   side 0     ; If NOP bit not set, jump to wait (armed)
    out x, 3         side 0     ; discard next 3 bit
    jmp next_inst    side 0
not_nop:
    out x, 1         side 0     ; Take SKIP_DELAY_BIT
    out y, 1         side 0     ; Take SKIP_READ_BIT
    jmp !x armed     side 0     ; If SKIP_DELAY_BIT set, jump to wait (armed)
    out pins, 1      side 1 [4] ; Output WRITE_DATA_BIT, assert SCK (mov pins uses OUT mapping)
    jmp !y read      side 1     ; If SKIP_READ_BIT not set, go to read
    jmp next_inst    side 0     ; otherwise start next round
read:
    in pins, 1      side 0      ; Read input data, deassert SCK
.wrap

% c-sdk {
#include "hardware/gpio.h"
static inline void pio_spi_read_on_demand_init(PIO pio, uint sm, uint prog_offs, uint n_bits,
        float clkdiv, uint pin_sck, uint pin_mosi, uint pin_miso, uint pin_trigger) {
    pio_sm_config c = spi_cpha1_read_on_demand_program_get_default_config(prog_offs);
    sm_config_set_out_pins(&c, pin_mosi, 1);
    sm_config_set_in_pins(&c, pin_miso);
    sm_config_set_sideset_pins(&c, pin_sck);
    // Only support MSB-first in this example code (shift to left, auto push/pull, threshold=nbits)
    sm_config_set_out_shift(&c, false, true, n_bits);
    sm_config_set_in_shift(&c, false, true, n_bits);
    sm_config_set_clkdiv(&c, clkdiv);

    // MOSI, SCK output are low, MISO is input
    pio_sm_set_pins_with_mask(pio, sm, 0, (1u << pin_sck) | (1u << pin_mosi));
    pio_sm_set_pindirs_with_mask(pio, sm,
        (1u << pin_sck) | (1u << pin_mosi),
        (1u << pin_sck) | (1u << pin_mosi) | (1u << pin_miso));
    pio_gpio_init(pio, pin_mosi);
    pio_gpio_init(pio, pin_miso);
    pio_gpio_init(pio, pin_sck);
    pio_gpio_init(pio, pin_trigger);

    // SPI is synchronous, so bypass input synchroniser to reduce input delay.
    hw_set_bits(&pio->input_sync_bypass, 1u << pin_miso);

    uint entry_point = prog_offs + spi_cpha1_read_on_demand_offset_entry_point;
    pio_sm_init(pio, sm, entry_point, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline uint8_t pio_add_program_spi_cpha1_read_on_demand_program_with_trigger_pin(
    PIO pio, uint8_t trigger_pin) {

    struct pio_program pio_pgm;
    uint16_t insts[spi_cpha1_read_on_demand_program.length];
    memcpy(insts, spi_cpha1_read_on_demand_program_instructions,
        sizeof(uint16_t)*spi_cpha1_read_on_demand_program.length);

    memcpy(&pio_pgm, &spi_cpha1_read_on_demand_program, sizeof(struct pio_program));
    pio_pgm.instructions = insts;

    insts[spi_cpha1_read_on_demand_offset_wait_inst] = 0x2000 | trigger_pin;

    /*
    for (uint i=0; i<spi_cpha1_read_on_demand_program.length; ++i) {
        printf("0x%04x <-> 0x%04x\n", pio_pgm.instructions[i], spi_cpha1_read_on_demand_program_instructions[i]);
    }
    */


    return pio_add_program(pio, &pio_pgm);
}
%}
